; номер очереди
queue = 0
; файл с доменами для блокировки
domainlist = /path/to/domains
; файл с url для блокировки
urllist = /path/to/urls
; файл с ssl доменами для блокировки
ssllist = /path/to/ssl_host
; файл с ip:port для блокировки
hostlist = contrib/hosts

; куда редиректить в случае наличия в списках
redirect_url = http://notify.example.com/?
; HTTP код ответа. default: 302 Moved Temporarily
http_code = 302 Moved Temporarily
; Что добавлять в redirect_url, line - строка из файла url, url - запрещенный url, none - ничего
url_additional_info=url

; дополнительные порты для протоколов (nDPI)
protocols = contrib/protos
; время вывода статистики по использованию памяти, минут
statistic_interval = 10
; если установлено в true, то сам nfqfilter отправляет tcp rst клиенту и серверу (тогда mark_value не используется) в случае фильтрации https и ip:port
send_rst = true
; каким значением метить пакеты для iptables в случае наличия в списках ssl и hosts
mark_value = 17
; количество обрабатываемых пакетов (default: 1024)
; max_pending_packets = 1024
; сохранять пакеты ошибками в /tmp
; save_bad_packets = false
; блокировать ssl client hello по первому пакету, если в ssl пакете нет server_name. Обязательно наличие файла sslips с ip адресами.
; block_undetected_ssl = false
; Путь к файлу с ip адресами для блокировки ssl по ip, если в ssl пакете нет server_name (block_undetected_ssl = true)
; sslips = /path/to/file
; перевод host: в строчные символы
; lower_host = false
; host должен точно совпадать со списком, т.е. в списке есть example.com, в запросе www.example.com - не блокируем.
; match_host_exactly = false
; Если в url встречаются escape последовательности символов 0-9, a-z, A-Z, то переводить их в символы
; url_decode = false
; Количество потоков обработки пакетов
; num_threads = 2

[logging]
loggers.root.level = information
;loggers.root.level = debug
loggers.root.channel = fileChannel
channels.fileChannel.class = FileChannel
channels.fileChannel.path = /var/log/nfqfilter.log
channels.fileChannel.rotation = 1 M
channels.fileChannel.archive = timestamp
channels.fileChannel.formatter.class = PatternFormatter
channels.fileChannel.formatter.pattern = %Y-%m-%d %H:%M:%S.%i [%P] %p %s - %t
channels.fileChannel.formatter.times = local
